cmake_minimum_required(VERSION 3.0)
PROJECT(safenode)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")

FIND_PACKAGE(JSONCPP REQUIRED)
FIND_PACKAGE(JSONRPCCPP REQUIRED)
FIND_PACKAGE(CURL REQUIRED)

#INCLUDE_DIRECTORIES(${JSONCPP_INCLUDE_DIRS} ${JSONRPCCPP_INCLUDE_DIRS} ${CURL_INCLUDE_DIRS})

# Set compiler settings
SET(CMAKE_CXX_FLAGS "-std=c++11 -g -Wall")
add_compile_options(-std=c++11 -g -Wall)

message(STATUS "CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")

# Find required packages
# FIND_PACKAGE(Boost REQUIRED COMPONENTS system filesystem unit_test_framework)

# Find test source files
FILE(GLOB SRCS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/*.h)

# Include header directory
# INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/..)

# Link to the appropriate libraries
# LINK_LIBRARIES(safeapi ${CURL_LIBRARY} ${JSONCPP_LIBRARY} jsonrpccpp-common jsonrpccpp-client boost_system boost_filesystem boost_unit_test_framework)

# Create new executable
ADD_EXECUTABLE(safenode ${SRCS})
# boost_system boost_filesystem boost_unit_test_framework 
TARGET_LINK_LIBRARIES(safenode ${CURL_LIBRARY} libjsoncpp.a jsonrpccpp-common jsonrpccpp-client)

# Set different name for executable
SET_TARGET_PROPERTIES(safenode PROPERTIES OUTPUT_NAME safenode)
